name: Build and Release

on:
  push:
    tags:
      - 'v*' # 当推送 v* 标签时触发 (如: v1.0.0)
  workflow_dispatch: # 允许手动触发
    inputs:
      version:
        description: 'Release version (如: v1.0.0)'
        required: true
        default: 'v0.1.0'

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史用于生成 changelog

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxrandr2 libxss1 libgtk-3-dev libxss1 libasound2-dev

      - name: Build & Release for ${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 增加构建超时时间和优化选项
          NODE_OPTIONS: '--max-old-space-size=4096'
        timeout-minutes: 30
        run: |
          echo "Building for ${{ matrix.platform }}..."
          pnpm build:${{ matrix.platform }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-artifacts
          path: |
            dist/*.exe
            dist/*.msi
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.snap
            dist/*.zip
            dist/*.tar.gz
          if-no-files-found: ignore

  # 创建 GitHub Release
  create-release:
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts to dist directory
        run: |
          mkdir -p dist
          find artifacts -name "*.exe" -exec cp {} dist/ \;
          find artifacts -name "*.msi" -exec cp {} dist/ \;
          find artifacts -name "*.dmg" -exec cp {} dist/ \;
          find artifacts -name "*.AppImage" -exec cp {} dist/ \;
          find artifacts -name "*.deb" -exec cp {} dist/ \;
          find artifacts -name "*.snap" -exec cp {} dist/ \;
          find artifacts -name "*.zip" -exec cp {} dist/ \;
          find artifacts -name "*.tar.gz" -exec cp {} dist/ \;
          ls -la dist/

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: 'Claudiatron ${{ steps.version.outputs.VERSION }}'
          body: 'Claudiatron ${{ steps.version.outputs.VERSION }} Release'
          draft: false
          prerelease: false
          files: |
            dist/*.exe
            dist/*.msi
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.snap
            dist/*.zip
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
